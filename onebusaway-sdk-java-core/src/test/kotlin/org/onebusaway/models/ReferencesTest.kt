// File generated from our OpenAPI spec by Stainless.

package org.onebusaway.models

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class ReferencesTest {

    @Test
    fun createReferences() {
        val references =
            References.builder()
                .agencies(
                    listOf(
                        References.Agency.builder()
                            .id("id")
                            .name("name")
                            .timezone("timezone")
                            .url("url")
                            .disclaimer("disclaimer")
                            .email("email")
                            .fareUrl("fareUrl")
                            .lang("lang")
                            .phone("phone")
                            .privateService(true)
                            .build()
                    )
                )
                .routes(
                    listOf(
                        References.Route.builder()
                            .id("id")
                            .agencyId("agencyId")
                            .type(0L)
                            .color("color")
                            .description("description")
                            .longName("longName")
                            .nullSafeShortName("nullSafeShortName")
                            .shortName("shortName")
                            .textColor("textColor")
                            .url("url")
                            .build()
                    )
                )
                .situations(
                    listOf(
                        References.Situation.builder()
                            .id("id")
                            .creationTime(0L)
                            .activeWindows(
                                listOf(
                                    References.Situation.ActiveWindow.builder()
                                        .from(0L)
                                        .to(0L)
                                        .build()
                                )
                            )
                            .allAffects(
                                listOf(
                                    References.Situation.AllAffect.builder()
                                        .agencyId("agencyId")
                                        .applicationId("applicationId")
                                        .directionId("directionId")
                                        .routeId("routeId")
                                        .stopId("stopId")
                                        .tripId("tripId")
                                        .build()
                                )
                            )
                            .consequenceMessage("consequenceMessage")
                            .consequences(
                                listOf(
                                    References.Situation.Consequence.builder()
                                        .condition("condition")
                                        .conditionDetails(
                                            References.Situation.Consequence.ConditionDetails
                                                .builder()
                                                .diversionPath(
                                                    References.Situation.Consequence
                                                        .ConditionDetails
                                                        .DiversionPath
                                                        .builder()
                                                        .length(0L)
                                                        .levels("levels")
                                                        .points("points")
                                                        .build()
                                                )
                                                .diversionStopIds(listOf("string"))
                                                .build()
                                        )
                                        .build()
                                )
                            )
                            .description(
                                References.Situation.Description.builder()
                                    .lang("lang")
                                    .value("value")
                                    .build()
                            )
                            .publicationWindows(
                                listOf(
                                    References.Situation.PublicationWindow.builder()
                                        .from(0L)
                                        .to(0L)
                                        .build()
                                )
                            )
                            .reason(References.Situation.Reason.EQUIPMENT_REASON)
                            .severity("severity")
                            .summary(
                                References.Situation.Summary.builder()
                                    .lang("lang")
                                    .value("value")
                                    .build()
                            )
                            .url(
                                References.Situation.Url.builder()
                                    .lang("lang")
                                    .value("value")
                                    .build()
                            )
                            .build()
                    )
                )
                .stops(
                    listOf(
                        References.Stop.builder()
                            .id("id")
                            .lat(0.0)
                            .lon(0.0)
                            .name("name")
                            .parent("parent")
                            .routeIds(listOf("string"))
                            .staticRouteIds(listOf("string"))
                            .code("code")
                            .direction("direction")
                            .locationType(0L)
                            .wheelchairBoarding("wheelchairBoarding")
                            .build()
                    )
                )
                .stopTimes(
                    listOf(
                        References.StopTime.builder()
                            .arrivalTime(0L)
                            .departureTime(0L)
                            .distanceAlongTrip(0.0)
                            .historicalOccupancy("historicalOccupancy")
                            .stopHeadsign("stopHeadsign")
                            .stopId("stopId")
                            .build()
                    )
                )
                .trips(
                    listOf(
                        References.Trip.builder()
                            .id("id")
                            .routeId("routeId")
                            .serviceId("serviceId")
                            .blockId("blockId")
                            .directionId("directionId")
                            .peakOffpeak(0L)
                            .routeShortName("routeShortName")
                            .shapeId("shapeId")
                            .timeZone("timeZone")
                            .tripHeadsign("tripHeadsign")
                            .tripShortName("tripShortName")
                            .build()
                    )
                )
                .build()
        assertThat(references).isNotNull
        assertThat(references.agencies())
            .containsExactly(
                References.Agency.builder()
                    .id("id")
                    .name("name")
                    .timezone("timezone")
                    .url("url")
                    .disclaimer("disclaimer")
                    .email("email")
                    .fareUrl("fareUrl")
                    .lang("lang")
                    .phone("phone")
                    .privateService(true)
                    .build()
            )
        assertThat(references.routes())
            .containsExactly(
                References.Route.builder()
                    .id("id")
                    .agencyId("agencyId")
                    .type(0L)
                    .color("color")
                    .description("description")
                    .longName("longName")
                    .nullSafeShortName("nullSafeShortName")
                    .shortName("shortName")
                    .textColor("textColor")
                    .url("url")
                    .build()
            )
        assertThat(references.situations())
            .containsExactly(
                References.Situation.builder()
                    .id("id")
                    .creationTime(0L)
                    .activeWindows(
                        listOf(References.Situation.ActiveWindow.builder().from(0L).to(0L).build())
                    )
                    .allAffects(
                        listOf(
                            References.Situation.AllAffect.builder()
                                .agencyId("agencyId")
                                .applicationId("applicationId")
                                .directionId("directionId")
                                .routeId("routeId")
                                .stopId("stopId")
                                .tripId("tripId")
                                .build()
                        )
                    )
                    .consequenceMessage("consequenceMessage")
                    .consequences(
                        listOf(
                            References.Situation.Consequence.builder()
                                .condition("condition")
                                .conditionDetails(
                                    References.Situation.Consequence.ConditionDetails.builder()
                                        .diversionPath(
                                            References.Situation.Consequence.ConditionDetails
                                                .DiversionPath
                                                .builder()
                                                .length(0L)
                                                .levels("levels")
                                                .points("points")
                                                .build()
                                        )
                                        .diversionStopIds(listOf("string"))
                                        .build()
                                )
                                .build()
                        )
                    )
                    .description(
                        References.Situation.Description.builder()
                            .lang("lang")
                            .value("value")
                            .build()
                    )
                    .publicationWindows(
                        listOf(
                            References.Situation.PublicationWindow.builder().from(0L).to(0L).build()
                        )
                    )
                    .reason(References.Situation.Reason.EQUIPMENT_REASON)
                    .severity("severity")
                    .summary(
                        References.Situation.Summary.builder().lang("lang").value("value").build()
                    )
                    .url(References.Situation.Url.builder().lang("lang").value("value").build())
                    .build()
            )
        assertThat(references.stops())
            .containsExactly(
                References.Stop.builder()
                    .id("id")
                    .lat(0.0)
                    .lon(0.0)
                    .name("name")
                    .parent("parent")
                    .routeIds(listOf("string"))
                    .staticRouteIds(listOf("string"))
                    .code("code")
                    .direction("direction")
                    .locationType(0L)
                    .wheelchairBoarding("wheelchairBoarding")
                    .build()
            )
        assertThat(references.stopTimes())
            .containsExactly(
                References.StopTime.builder()
                    .arrivalTime(0L)
                    .departureTime(0L)
                    .distanceAlongTrip(0.0)
                    .historicalOccupancy("historicalOccupancy")
                    .stopHeadsign("stopHeadsign")
                    .stopId("stopId")
                    .build()
            )
        assertThat(references.trips())
            .containsExactly(
                References.Trip.builder()
                    .id("id")
                    .routeId("routeId")
                    .serviceId("serviceId")
                    .blockId("blockId")
                    .directionId("directionId")
                    .peakOffpeak(0L)
                    .routeShortName("routeShortName")
                    .shapeId("shapeId")
                    .timeZone("timeZone")
                    .tripHeadsign("tripHeadsign")
                    .tripShortName("tripShortName")
                    .build()
            )
    }
}
