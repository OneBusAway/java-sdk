// File generated from our OpenAPI spec by Stainless.

package org.onebusaway.models.arrivalanddeparture

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import org.onebusaway.core.jsonMapper
import org.onebusaway.models.References

internal class ArrivalAndDepartureRetrieveResponseTest {

    @Test
    fun create() {
        val arrivalAndDepartureRetrieveResponse =
            ArrivalAndDepartureRetrieveResponse.builder()
                .code(0L)
                .currentTime(0L)
                .text("text")
                .version(0L)
                .data(
                    ArrivalAndDepartureRetrieveResponse.Data.builder()
                        .entry(
                            ArrivalAndDepartureRetrieveResponse.Data.Entry.builder()
                                .arrivalEnabled(true)
                                .blockTripSequence(0L)
                                .departureEnabled(true)
                                .numberOfStopsAway(0L)
                                .predictedArrivalTime(0L)
                                .predictedDepartureTime(0L)
                                .routeId("routeId")
                                .scheduledArrivalTime(0L)
                                .scheduledDepartureTime(0L)
                                .serviceDate(0L)
                                .stopId("stopId")
                                .stopSequence(0L)
                                .totalStopsInTrip(0L)
                                .tripHeadsign("tripHeadsign")
                                .tripId("tripId")
                                .vehicleId("vehicleId")
                                .actualTrack("actualTrack")
                                .distanceFromStop(0.0)
                                .frequency("frequency")
                                .historicalOccupancy("historicalOccupancy")
                                .lastUpdateTime(0L)
                                .occupancyStatus("occupancyStatus")
                                .predicted(true)
                                .predictedArrivalInterval("predictedArrivalInterval")
                                .predictedDepartureInterval("predictedDepartureInterval")
                                .predictedOccupancy("predictedOccupancy")
                                .routeLongName("routeLongName")
                                .routeShortName("routeShortName")
                                .scheduledArrivalInterval("scheduledArrivalInterval")
                                .scheduledDepartureInterval("scheduledDepartureInterval")
                                .scheduledTrack("scheduledTrack")
                                .addSituationId("string")
                                .status("status")
                                .tripStatus(
                                    ArrivalAndDepartureRetrieveResponse.Data.Entry.TripStatus
                                        .builder()
                                        .activeTripId("activeTripId")
                                        .blockTripSequence(0L)
                                        .closestStop("closestStop")
                                        .distanceAlongTrip(0.0)
                                        .lastKnownDistanceAlongTrip(0.0)
                                        .lastLocationUpdateTime(0L)
                                        .lastUpdateTime(0L)
                                        .occupancyCapacity(0L)
                                        .occupancyCount(0L)
                                        .occupancyStatus("occupancyStatus")
                                        .phase("phase")
                                        .predicted(true)
                                        .scheduleDeviation(0L)
                                        .serviceDate(0L)
                                        .status("status")
                                        .totalDistanceAlongTrip(0.0)
                                        .closestStopTimeOffset(0L)
                                        .frequency("frequency")
                                        .lastKnownLocation(
                                            ArrivalAndDepartureRetrieveResponse.Data.Entry
                                                .TripStatus
                                                .LastKnownLocation
                                                .builder()
                                                .lat(0.0)
                                                .lon(0.0)
                                                .build()
                                        )
                                        .lastKnownOrientation(0.0)
                                        .nextStop("nextStop")
                                        .nextStopTimeOffset(0L)
                                        .orientation(0.0)
                                        .position(
                                            ArrivalAndDepartureRetrieveResponse.Data.Entry
                                                .TripStatus
                                                .Position
                                                .builder()
                                                .lat(0.0)
                                                .lon(0.0)
                                                .build()
                                        )
                                        .scheduledDistanceAlongTrip(0.0)
                                        .addSituationId("string")
                                        .vehicleId("vehicleId")
                                        .build()
                                )
                                .build()
                        )
                        .references(
                            References.builder()
                                .addAgency(
                                    References.Agency.builder()
                                        .id("id")
                                        .name("name")
                                        .timezone("timezone")
                                        .url("url")
                                        .disclaimer("disclaimer")
                                        .email("email")
                                        .fareUrl("fareUrl")
                                        .lang("lang")
                                        .phone("phone")
                                        .privateService(true)
                                        .build()
                                )
                                .addRoute(
                                    References.Route.builder()
                                        .id("id")
                                        .agencyId("agencyId")
                                        .type(0L)
                                        .color("color")
                                        .description("description")
                                        .longName("longName")
                                        .nullSafeShortName("nullSafeShortName")
                                        .shortName("shortName")
                                        .textColor("textColor")
                                        .url("url")
                                        .build()
                                )
                                .addSituation(
                                    References.Situation.builder()
                                        .id("id")
                                        .creationTime(0L)
                                        .addActiveWindow(
                                            References.Situation.ActiveWindow.builder()
                                                .from(0L)
                                                .to(0L)
                                                .build()
                                        )
                                        .addAllAffect(
                                            References.Situation.AllAffect.builder()
                                                .agencyId("agencyId")
                                                .applicationId("applicationId")
                                                .directionId("directionId")
                                                .routeId("routeId")
                                                .stopId("stopId")
                                                .tripId("tripId")
                                                .build()
                                        )
                                        .consequenceMessage("consequenceMessage")
                                        .addConsequence(
                                            References.Situation.Consequence.builder()
                                                .condition("condition")
                                                .conditionDetails(
                                                    References.Situation.Consequence
                                                        .ConditionDetails
                                                        .builder()
                                                        .diversionPath(
                                                            References.Situation.Consequence
                                                                .ConditionDetails
                                                                .DiversionPath
                                                                .builder()
                                                                .length(0L)
                                                                .levels("levels")
                                                                .points("points")
                                                                .build()
                                                        )
                                                        .addDiversionStopId("string")
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .description(
                                            References.Situation.Description.builder()
                                                .lang("lang")
                                                .value("value")
                                                .build()
                                        )
                                        .addPublicationWindow(
                                            References.Situation.PublicationWindow.builder()
                                                .from(0L)
                                                .to(0L)
                                                .build()
                                        )
                                        .reason(References.Situation.Reason.EQUIPMENT_REASON)
                                        .severity("severity")
                                        .summary(
                                            References.Situation.Summary.builder()
                                                .lang("lang")
                                                .value("value")
                                                .build()
                                        )
                                        .url(
                                            References.Situation.Url.builder()
                                                .lang("lang")
                                                .value("value")
                                                .build()
                                        )
                                        .build()
                                )
                                .addStop(
                                    References.Stop.builder()
                                        .id("id")
                                        .lat(0.0)
                                        .locationType(0L)
                                        .lon(0.0)
                                        .name("name")
                                        .parent("parent")
                                        .addRouteId("string")
                                        .addStaticRouteId("string")
                                        .code("code")
                                        .direction("direction")
                                        .wheelchairBoarding("wheelchairBoarding")
                                        .build()
                                )
                                .addStopTime(
                                    References.StopTime.builder()
                                        .arrivalTime(0L)
                                        .departureTime(0L)
                                        .distanceAlongTrip(0.0)
                                        .historicalOccupancy("historicalOccupancy")
                                        .stopHeadsign("stopHeadsign")
                                        .stopId("stopId")
                                        .build()
                                )
                                .addTrip(
                                    References.Trip.builder()
                                        .id("id")
                                        .routeId("routeId")
                                        .serviceId("serviceId")
                                        .blockId("blockId")
                                        .directionId("directionId")
                                        .peakOffpeak(0L)
                                        .routeShortName("routeShortName")
                                        .shapeId("shapeId")
                                        .timeZone("timeZone")
                                        .tripHeadsign("tripHeadsign")
                                        .tripShortName("tripShortName")
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .build()

        assertThat(arrivalAndDepartureRetrieveResponse.code()).isEqualTo(0L)
        assertThat(arrivalAndDepartureRetrieveResponse.currentTime()).isEqualTo(0L)
        assertThat(arrivalAndDepartureRetrieveResponse.text()).isEqualTo("text")
        assertThat(arrivalAndDepartureRetrieveResponse.version()).isEqualTo(0L)
        assertThat(arrivalAndDepartureRetrieveResponse.data())
            .isEqualTo(
                ArrivalAndDepartureRetrieveResponse.Data.builder()
                    .entry(
                        ArrivalAndDepartureRetrieveResponse.Data.Entry.builder()
                            .arrivalEnabled(true)
                            .blockTripSequence(0L)
                            .departureEnabled(true)
                            .numberOfStopsAway(0L)
                            .predictedArrivalTime(0L)
                            .predictedDepartureTime(0L)
                            .routeId("routeId")
                            .scheduledArrivalTime(0L)
                            .scheduledDepartureTime(0L)
                            .serviceDate(0L)
                            .stopId("stopId")
                            .stopSequence(0L)
                            .totalStopsInTrip(0L)
                            .tripHeadsign("tripHeadsign")
                            .tripId("tripId")
                            .vehicleId("vehicleId")
                            .actualTrack("actualTrack")
                            .distanceFromStop(0.0)
                            .frequency("frequency")
                            .historicalOccupancy("historicalOccupancy")
                            .lastUpdateTime(0L)
                            .occupancyStatus("occupancyStatus")
                            .predicted(true)
                            .predictedArrivalInterval("predictedArrivalInterval")
                            .predictedDepartureInterval("predictedDepartureInterval")
                            .predictedOccupancy("predictedOccupancy")
                            .routeLongName("routeLongName")
                            .routeShortName("routeShortName")
                            .scheduledArrivalInterval("scheduledArrivalInterval")
                            .scheduledDepartureInterval("scheduledDepartureInterval")
                            .scheduledTrack("scheduledTrack")
                            .addSituationId("string")
                            .status("status")
                            .tripStatus(
                                ArrivalAndDepartureRetrieveResponse.Data.Entry.TripStatus.builder()
                                    .activeTripId("activeTripId")
                                    .blockTripSequence(0L)
                                    .closestStop("closestStop")
                                    .distanceAlongTrip(0.0)
                                    .lastKnownDistanceAlongTrip(0.0)
                                    .lastLocationUpdateTime(0L)
                                    .lastUpdateTime(0L)
                                    .occupancyCapacity(0L)
                                    .occupancyCount(0L)
                                    .occupancyStatus("occupancyStatus")
                                    .phase("phase")
                                    .predicted(true)
                                    .scheduleDeviation(0L)
                                    .serviceDate(0L)
                                    .status("status")
                                    .totalDistanceAlongTrip(0.0)
                                    .closestStopTimeOffset(0L)
                                    .frequency("frequency")
                                    .lastKnownLocation(
                                        ArrivalAndDepartureRetrieveResponse.Data.Entry.TripStatus
                                            .LastKnownLocation
                                            .builder()
                                            .lat(0.0)
                                            .lon(0.0)
                                            .build()
                                    )
                                    .lastKnownOrientation(0.0)
                                    .nextStop("nextStop")
                                    .nextStopTimeOffset(0L)
                                    .orientation(0.0)
                                    .position(
                                        ArrivalAndDepartureRetrieveResponse.Data.Entry.TripStatus
                                            .Position
                                            .builder()
                                            .lat(0.0)
                                            .lon(0.0)
                                            .build()
                                    )
                                    .scheduledDistanceAlongTrip(0.0)
                                    .addSituationId("string")
                                    .vehicleId("vehicleId")
                                    .build()
                            )
                            .build()
                    )
                    .references(
                        References.builder()
                            .addAgency(
                                References.Agency.builder()
                                    .id("id")
                                    .name("name")
                                    .timezone("timezone")
                                    .url("url")
                                    .disclaimer("disclaimer")
                                    .email("email")
                                    .fareUrl("fareUrl")
                                    .lang("lang")
                                    .phone("phone")
                                    .privateService(true)
                                    .build()
                            )
                            .addRoute(
                                References.Route.builder()
                                    .id("id")
                                    .agencyId("agencyId")
                                    .type(0L)
                                    .color("color")
                                    .description("description")
                                    .longName("longName")
                                    .nullSafeShortName("nullSafeShortName")
                                    .shortName("shortName")
                                    .textColor("textColor")
                                    .url("url")
                                    .build()
                            )
                            .addSituation(
                                References.Situation.builder()
                                    .id("id")
                                    .creationTime(0L)
                                    .addActiveWindow(
                                        References.Situation.ActiveWindow.builder()
                                            .from(0L)
                                            .to(0L)
                                            .build()
                                    )
                                    .addAllAffect(
                                        References.Situation.AllAffect.builder()
                                            .agencyId("agencyId")
                                            .applicationId("applicationId")
                                            .directionId("directionId")
                                            .routeId("routeId")
                                            .stopId("stopId")
                                            .tripId("tripId")
                                            .build()
                                    )
                                    .consequenceMessage("consequenceMessage")
                                    .addConsequence(
                                        References.Situation.Consequence.builder()
                                            .condition("condition")
                                            .conditionDetails(
                                                References.Situation.Consequence.ConditionDetails
                                                    .builder()
                                                    .diversionPath(
                                                        References.Situation.Consequence
                                                            .ConditionDetails
                                                            .DiversionPath
                                                            .builder()
                                                            .length(0L)
                                                            .levels("levels")
                                                            .points("points")
                                                            .build()
                                                    )
                                                    .addDiversionStopId("string")
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .description(
                                        References.Situation.Description.builder()
                                            .lang("lang")
                                            .value("value")
                                            .build()
                                    )
                                    .addPublicationWindow(
                                        References.Situation.PublicationWindow.builder()
                                            .from(0L)
                                            .to(0L)
                                            .build()
                                    )
                                    .reason(References.Situation.Reason.EQUIPMENT_REASON)
                                    .severity("severity")
                                    .summary(
                                        References.Situation.Summary.builder()
                                            .lang("lang")
                                            .value("value")
                                            .build()
                                    )
                                    .url(
                                        References.Situation.Url.builder()
                                            .lang("lang")
                                            .value("value")
                                            .build()
                                    )
                                    .build()
                            )
                            .addStop(
                                References.Stop.builder()
                                    .id("id")
                                    .lat(0.0)
                                    .locationType(0L)
                                    .lon(0.0)
                                    .name("name")
                                    .parent("parent")
                                    .addRouteId("string")
                                    .addStaticRouteId("string")
                                    .code("code")
                                    .direction("direction")
                                    .wheelchairBoarding("wheelchairBoarding")
                                    .build()
                            )
                            .addStopTime(
                                References.StopTime.builder()
                                    .arrivalTime(0L)
                                    .departureTime(0L)
                                    .distanceAlongTrip(0.0)
                                    .historicalOccupancy("historicalOccupancy")
                                    .stopHeadsign("stopHeadsign")
                                    .stopId("stopId")
                                    .build()
                            )
                            .addTrip(
                                References.Trip.builder()
                                    .id("id")
                                    .routeId("routeId")
                                    .serviceId("serviceId")
                                    .blockId("blockId")
                                    .directionId("directionId")
                                    .peakOffpeak(0L)
                                    .routeShortName("routeShortName")
                                    .shapeId("shapeId")
                                    .timeZone("timeZone")
                                    .tripHeadsign("tripHeadsign")
                                    .tripShortName("tripShortName")
                                    .build()
                            )
                            .build()
                    )
                    .build()
            )
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val arrivalAndDepartureRetrieveResponse =
            ArrivalAndDepartureRetrieveResponse.builder()
                .code(0L)
                .currentTime(0L)
                .text("text")
                .version(0L)
                .data(
                    ArrivalAndDepartureRetrieveResponse.Data.builder()
                        .entry(
                            ArrivalAndDepartureRetrieveResponse.Data.Entry.builder()
                                .arrivalEnabled(true)
                                .blockTripSequence(0L)
                                .departureEnabled(true)
                                .numberOfStopsAway(0L)
                                .predictedArrivalTime(0L)
                                .predictedDepartureTime(0L)
                                .routeId("routeId")
                                .scheduledArrivalTime(0L)
                                .scheduledDepartureTime(0L)
                                .serviceDate(0L)
                                .stopId("stopId")
                                .stopSequence(0L)
                                .totalStopsInTrip(0L)
                                .tripHeadsign("tripHeadsign")
                                .tripId("tripId")
                                .vehicleId("vehicleId")
                                .actualTrack("actualTrack")
                                .distanceFromStop(0.0)
                                .frequency("frequency")
                                .historicalOccupancy("historicalOccupancy")
                                .lastUpdateTime(0L)
                                .occupancyStatus("occupancyStatus")
                                .predicted(true)
                                .predictedArrivalInterval("predictedArrivalInterval")
                                .predictedDepartureInterval("predictedDepartureInterval")
                                .predictedOccupancy("predictedOccupancy")
                                .routeLongName("routeLongName")
                                .routeShortName("routeShortName")
                                .scheduledArrivalInterval("scheduledArrivalInterval")
                                .scheduledDepartureInterval("scheduledDepartureInterval")
                                .scheduledTrack("scheduledTrack")
                                .addSituationId("string")
                                .status("status")
                                .tripStatus(
                                    ArrivalAndDepartureRetrieveResponse.Data.Entry.TripStatus
                                        .builder()
                                        .activeTripId("activeTripId")
                                        .blockTripSequence(0L)
                                        .closestStop("closestStop")
                                        .distanceAlongTrip(0.0)
                                        .lastKnownDistanceAlongTrip(0.0)
                                        .lastLocationUpdateTime(0L)
                                        .lastUpdateTime(0L)
                                        .occupancyCapacity(0L)
                                        .occupancyCount(0L)
                                        .occupancyStatus("occupancyStatus")
                                        .phase("phase")
                                        .predicted(true)
                                        .scheduleDeviation(0L)
                                        .serviceDate(0L)
                                        .status("status")
                                        .totalDistanceAlongTrip(0.0)
                                        .closestStopTimeOffset(0L)
                                        .frequency("frequency")
                                        .lastKnownLocation(
                                            ArrivalAndDepartureRetrieveResponse.Data.Entry
                                                .TripStatus
                                                .LastKnownLocation
                                                .builder()
                                                .lat(0.0)
                                                .lon(0.0)
                                                .build()
                                        )
                                        .lastKnownOrientation(0.0)
                                        .nextStop("nextStop")
                                        .nextStopTimeOffset(0L)
                                        .orientation(0.0)
                                        .position(
                                            ArrivalAndDepartureRetrieveResponse.Data.Entry
                                                .TripStatus
                                                .Position
                                                .builder()
                                                .lat(0.0)
                                                .lon(0.0)
                                                .build()
                                        )
                                        .scheduledDistanceAlongTrip(0.0)
                                        .addSituationId("string")
                                        .vehicleId("vehicleId")
                                        .build()
                                )
                                .build()
                        )
                        .references(
                            References.builder()
                                .addAgency(
                                    References.Agency.builder()
                                        .id("id")
                                        .name("name")
                                        .timezone("timezone")
                                        .url("url")
                                        .disclaimer("disclaimer")
                                        .email("email")
                                        .fareUrl("fareUrl")
                                        .lang("lang")
                                        .phone("phone")
                                        .privateService(true)
                                        .build()
                                )
                                .addRoute(
                                    References.Route.builder()
                                        .id("id")
                                        .agencyId("agencyId")
                                        .type(0L)
                                        .color("color")
                                        .description("description")
                                        .longName("longName")
                                        .nullSafeShortName("nullSafeShortName")
                                        .shortName("shortName")
                                        .textColor("textColor")
                                        .url("url")
                                        .build()
                                )
                                .addSituation(
                                    References.Situation.builder()
                                        .id("id")
                                        .creationTime(0L)
                                        .addActiveWindow(
                                            References.Situation.ActiveWindow.builder()
                                                .from(0L)
                                                .to(0L)
                                                .build()
                                        )
                                        .addAllAffect(
                                            References.Situation.AllAffect.builder()
                                                .agencyId("agencyId")
                                                .applicationId("applicationId")
                                                .directionId("directionId")
                                                .routeId("routeId")
                                                .stopId("stopId")
                                                .tripId("tripId")
                                                .build()
                                        )
                                        .consequenceMessage("consequenceMessage")
                                        .addConsequence(
                                            References.Situation.Consequence.builder()
                                                .condition("condition")
                                                .conditionDetails(
                                                    References.Situation.Consequence
                                                        .ConditionDetails
                                                        .builder()
                                                        .diversionPath(
                                                            References.Situation.Consequence
                                                                .ConditionDetails
                                                                .DiversionPath
                                                                .builder()
                                                                .length(0L)
                                                                .levels("levels")
                                                                .points("points")
                                                                .build()
                                                        )
                                                        .addDiversionStopId("string")
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .description(
                                            References.Situation.Description.builder()
                                                .lang("lang")
                                                .value("value")
                                                .build()
                                        )
                                        .addPublicationWindow(
                                            References.Situation.PublicationWindow.builder()
                                                .from(0L)
                                                .to(0L)
                                                .build()
                                        )
                                        .reason(References.Situation.Reason.EQUIPMENT_REASON)
                                        .severity("severity")
                                        .summary(
                                            References.Situation.Summary.builder()
                                                .lang("lang")
                                                .value("value")
                                                .build()
                                        )
                                        .url(
                                            References.Situation.Url.builder()
                                                .lang("lang")
                                                .value("value")
                                                .build()
                                        )
                                        .build()
                                )
                                .addStop(
                                    References.Stop.builder()
                                        .id("id")
                                        .lat(0.0)
                                        .locationType(0L)
                                        .lon(0.0)
                                        .name("name")
                                        .parent("parent")
                                        .addRouteId("string")
                                        .addStaticRouteId("string")
                                        .code("code")
                                        .direction("direction")
                                        .wheelchairBoarding("wheelchairBoarding")
                                        .build()
                                )
                                .addStopTime(
                                    References.StopTime.builder()
                                        .arrivalTime(0L)
                                        .departureTime(0L)
                                        .distanceAlongTrip(0.0)
                                        .historicalOccupancy("historicalOccupancy")
                                        .stopHeadsign("stopHeadsign")
                                        .stopId("stopId")
                                        .build()
                                )
                                .addTrip(
                                    References.Trip.builder()
                                        .id("id")
                                        .routeId("routeId")
                                        .serviceId("serviceId")
                                        .blockId("blockId")
                                        .directionId("directionId")
                                        .peakOffpeak(0L)
                                        .routeShortName("routeShortName")
                                        .shapeId("shapeId")
                                        .timeZone("timeZone")
                                        .tripHeadsign("tripHeadsign")
                                        .tripShortName("tripShortName")
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .build()

        val roundtrippedArrivalAndDepartureRetrieveResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(arrivalAndDepartureRetrieveResponse),
                jacksonTypeRef<ArrivalAndDepartureRetrieveResponse>(),
            )

        assertThat(roundtrippedArrivalAndDepartureRetrieveResponse)
            .isEqualTo(arrivalAndDepartureRetrieveResponse)
    }
}
